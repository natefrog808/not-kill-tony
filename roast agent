// config.ts
export const CONFIG = {
    COOLDOWN_DURATION: 30000,
    MAX_MOOD_LEVEL: 10,
    MIN_MOOD_LEVEL: -10,
    MAX_REQUESTS_PER_MINUTE: 50,
    MAX_MESSAGE_HISTORY: 100,
    REDIS_RETRY_ATTEMPTS: 3,
    REDIS_RETRY_DELAY: 1000,
    DEFAULT_OPENAI_MODEL: 'gpt-4',
    MAX_TOKENS: 150,
    CONTEXT_WINDOW_SIZE: 10,
    USER_PROFILE_EXPIRY: 86400 * 30, // 30 days
    MAINTENANCE_INTERVAL: 3600000, // 1 hour
    PERSONALITY_ADJUSTMENT_INTERVAL: 900000, // 15 minutes
    METRICS_AGGREGATION_INTERVAL: 86400000, // 1 day
    DEFAULT_SENSITIVITY_LEVEL: 0.5,
    MIN_RESPONSE_TEMPERATURE: 0.3,
    MAX_RESPONSE_TEMPERATURE: 1.0,
    BASE_RESPONSE_TEMPERATURE: 0.7
};

// types.ts
import { z } from 'zod';

export const MessageSchema = z.object({
    content: z.string().min(1).max(2000),
    userId: z.string(),
    userName: z.string(),
    mentions: z.array(z.string()).optional(),
    timestamp: z.number().default(() => Date.now())
});

export type Message = z.infer<typeof MessageSchema>;

export interface UserProfile {
    userId: string;
    userName: string;
    sensitivityLevel: number;
    pastInteractions: InteractionHistory[];
    preferredTopics: string[];
    lastInteraction: number;
    totalInteractions: number;
    averageSentiment: number;
    responsePreferences: {
        witLevel: number;
        sarcasmLevel: number;
        technicalLevel: number;
    };
}

export interface InteractionHistory {
    timestamp: number;
    sentiment: number;
    responseType: string;
    messageContent: string;
    botResponse: string;
}

export interface ConversationContext {
    timestamp: number;
    content: string;
    sentiment: number;
    userId: string;
    messageType: 'user' | 'bot';
}

export interface AdaptiveParameters {
    witLevel: number;
    sarcasmLevel: number;
    kindnessThreshold: number;
    technicalLevel: number;
}

export interface NLPAnalysis {
    sentiment: number;
    topics: string[];
    intent: string;
    entities: string[];
    technicalComplexity: number;
    codeDetected: boolean;
    languagesDetected: string[];
    toxicity: number;
}

export interface PersonalityTrait {
    name: string;
    level: number;
    responses: string[];
    conditions: {
        minSentiment?: number;
        maxSentiment?: number;
        timeOfDay?: number[];
        userSensitivity?: number;
    };
}

export interface BotMetrics {
    totalInteractions: number;
    averageResponseTime: number;
    userSatisfactionScore: number;
    mostCommonTopics: Map<string, number>;
    errorRate: number;
    activeUsers: Set<string>;
}

export interface Memory {
    shortTerm: ConversationContext[];
    longTerm: Map<string, number>;
    context: string[];
    userInteractions: Map<string, InteractionHistory[]>;
}

export interface EnhancedBotState {
    moodLevel: number;
    lastResponses: string[];
    cooldowns: Map<string, number>;
    conversationHistory: ConversationContext[];
    memory: Memory;
    personality: PersonalityTrait[];
    learningRate: number;
    lastInteractionTime: number;
    commandPrefix: string;
    debugMode: boolean;
    openAIConfig: {
        model: string;
        maxTokens: number;
    };
    adaptiveParameters: AdaptiveParameters;
    metrics: BotMetrics;
}

// personality-traits.ts
export const PERSONALITY_TRAITS: PersonalityTrait[] = [
    {
        name: 'sarcasm',
        level: 0.8,
        responses: [
            "Oh wow, {userName}, that's *totally* genius... ðŸ™„ {codeComment}",
            "Brilliant observation, {userName}. Did you figure that out all by yourself? {codeComment}",
            "Your code is like a modern art masterpiece, {userName}... nobody understands it. {codeComment}",
            "Have you considered a career in writing comedy? Because your code is hilarious. {codeComment}"
        ],
        conditions: {
            minSentiment: -0.5,
            maxSentiment: 0.8,
            userSensitivity: 0.7
        }
    },
    {
        name: 'technical',
        level: 0.9,
        responses: [
            "Let me refactor that for you, {userName}. First, we'll need to address the {issue} in your code.",
            "Interesting approach, {userName}. Have you considered using {betterPattern} instead?",
            "Your code's complexity is reaching astronomical levels, {userName}. Time for some clean code principles?",
            "That's an interesting use of {pattern}... if by interesting you mean potentially catastrophic."
        ],
        conditions: {
            minSentiment: -0.2,
            maxSentiment: 1.0,
            userSensitivity: 0.4
        }
    },
    {
        name: 'encouraging',
        level: 0.6,
        responses: [
            "Not bad, {userName}! But let's make it even better by {improvement}",
            "You're getting there! Just need to tweak {issue} and you'll be golden.",
            "I see what you're trying to do. Here's a pro tip: {tip}",
            "Almost perfect! Just one small suggestion: {suggestion}"
        ],
        conditions: {
            minSentiment: 0.3,
            maxSentiment: 1.0,
            userSensitivity: 0.8
        }
    }
];

// utils.ts
export function calculateSentiment(text: string): number {
    // Simple sentiment analysis implementation
    const positiveWords = new Set(['good', 'great', 'awesome', 'excellent', 'perfect', 'thanks']);
    const negativeWords = new Set(['bad', 'terrible', 'awful', 'horrible', 'wrong', 'stupid']);
    
    const words = text.toLowerCase().split(/\s+/);
    let sentiment = 0;
    
    words.forEach(word => {
        if (positiveWords.has(word)) sentiment += 0.2;
        if (negativeWords.has(word)) sentiment -= 0.2;
    });
    
    return Math.max(Math.min(sentiment, 1), -1);
}

export function detectTechnicalComplexity(text: string): number {
    const technicalTerms = new Set([
        'algorithm', 'function', 'class', 'method', 'api',
        'database', 'async', 'promise', 'callback', 'interface'
    ]);
    
    const words = text.toLowerCase().split(/\s+/);
    let complexity = 0;
    
    words.forEach(word => {
        if (technicalTerms.has(word)) complexity += 0.2;
    });
    
    return Math.min(complexity, 1);
}

export function detectCodeSnippet(text: string): boolean {
    const codePatterns = [
        /\b(function|class|const|let|var|if|for|while)\b/,
        /[{}\[\]()]/,
        /\b(return|import|export)\b/,
        /\b(async|await)\b/,
        /\b(try|catch)\b/
    ];
    
    return codePatterns.some(pattern => pattern.test(text));
}

// roast-bot.ts
import { OpenAI } from 'openai';
import { Redis } from 'ioredis';
import { CONFIG } from './config';
import { logger } from './logger';
import * as utils from './utils';
import {
    Message,
    MessageSchema,
    EnhancedBotState,
    NLPAnalysis,
    UserProfile,
    ConversationContext,
    PersonalityTrait
} from './types';
import { PERSONALITY_TRAITS } from './personality-traits';

export class RoastBot {
    private state: EnhancedBotState;
    private openai: OpenAI;
    private redis: Redis;
    private userProfiles: Map<string, UserProfile> = new Map();
    private maintenanceInterval: NodeJS.Timeout;
    private personalityInterval: NodeJS.Timeout;
    private metricsInterval: NodeJS.Timeout;

    constructor(apiKey: string, redisConfig: {
        host?: string;
        port?: number;
        password?: string;
        url?: string;
    } = {}) {
        this.openai = new OpenAI({ apiKey });
        this.redis = this.initializeRedis(redisConfig);
        this.state = this.initializeState();
        this.setupCleanup();
        this.initializeBackgroundTasks();
    }

    private async analyzeMessage(message: Message): Promise<NLPAnalysis> {
        try {
            const sentiment = utils.calculateSentiment(message.content);
            const technicalComplexity = utils.detectTechnicalComplexity(message.content);
            const codeDetected = utils.detectCodeSnippet(message.content);
            
            // Use OpenAI for more detailed analysis
            const completion = await this.openai.chat.completions.create({
                messages: [{
                    role: 'system',
                    content: 'Analyze the following message for topics, intent, and entities. Return JSON.'
                }, {
                    role: 'user',
                    content: message.content
                }],
                model: this.state.openAIConfig.model
            });

            const aiAnalysis = JSON.parse(completion.choices[0].message.content || '{}');

            return {
                sentiment,
                technicalComplexity,
                codeDetected,
                topics: aiAnalysis.topics || [],
                intent: aiAnalysis.intent || 'unknown',
                entities: aiAnalysis.entities || [],
                languagesDetected: aiAnalysis.languages || [],
                toxicity: aiAnalysis.toxicity || 0
            };
        } catch (error) {
            logger.error('Error in message analysis:', error);
            return {
                sentiment: 0,
                topics: [],
                intent: 'unknown',
                entities: [],
                technicalComplexity: 0,
                codeDetected: false,
                languagesDetected: [],
                toxicity: 0
            };
        }
    }

    private async generateResponse(message: Message, analysis: NLPAnalysis): Promise<string> {
        try {
            const userProfile = await this.getUserProfile(message.userId);
            const personality = this.selectPersonalityTrait(analysis, userProfile);
            const template = this.selectResponseTemplate(personality, analysis);
            
            const prompt = this.buildPrompt(message, analysis, personality, template);
            
            const completion = await this.openai.chat.completions.create({
                messages: [{
                    role: 'system',
                    content: prompt
                }],
                model: this.state.openAIConfig.model,
                temperature: this.calculateResponseTemperature(analysis)
            });

            const response = this.processResponse(
                completion.choices[0].message.content || '',
                message,
                analysis
            );

            await this.updateUserProfile(message.userId, analysis, response);
            
            return response;
        } catch (error) {
            logger.error('Error generating response:', error);
            return "Sorry, I'm having a moment... unlike your code, which seems to be having several moments.";
        }
    }

    public async handleMessage(message: unknown): Promise<string> {
        try {
            const validatedMessage = MessageSchema.parse(message);
            
            if (!await this.checkRateLimit(validatedMessage.userId)) {
                return "You're sending messages too quickly. Please wait a moment.";
            }

            const analysis = await this.analyzeMessage(validatedMessage);
            const response = await this.generateResponse(validatedMessage, analysis);
            
            await this.updateMetrics(validatedMessage, analysis, response);
            
            return response;
        } catch (error) {
            logger.error('Error handling message:', error);
            return "Something went wrong. But hey, at least it's not as wrong as using tabs instead of spaces!";
        }
    }

    private async getUserProfile(userId: string): Promise<UserProfile> {
        try {
            const cachedProfile = this.userProfiles.get(userId);
            if (cachedProfile) return cachedProfile;

            const storedProfile = await this.redis.get(`user:${userId}`);
            if (storedProfile) {
                const profile = JSON.parse(storedProfile);
                this.userProfiles.set(userId, profile);
                return profile;
            }

            return this.createNewUserProfile(userId);
        } catch (error) {
            logger.error('Error getting user profile:', error);
            return this.createNewUserProfile(userId);
        }
    }

    private createNewUserProfile(userId: string): UserProfile {
        const profile: UserProfile = {
            userId,
            userName: '',
            sensitivityLevel: CONFIG.DEFAULT_SENSITIVITY_LEVEL,
            pastInteractions: [],
            preferredTopics: [],
            lastInteraction: Date.now(),
            totalInteractions: 0,
            averageSentiment: 0,
            responsePreferences: {
                witLevel: 0.5,
                sarcasmLevel: 0.5,
                technicalLevel: 0.5
            }
        };

        this.userProfiles.set(userId, profile);
        this.redis.set(`user:${userId}`, JSON.stringify(profile), 'EX', CONFIG.USER_PROFILE_EXPIRY);
        
        return profile;
    }

    private initializeBackgroundTasks(): void {
        this.maintenanceInterval = setInterval(
            () => this.performMaintenance(),
            CONFIG.MAINTENANCE_INTERVAL
        );
        
        this.personalityInterval = setInterval(
            () => this.adjustPersonality(),
            CONFIG.PERSONALITY_ADJUSTMENT_INTERVAL
        );
        
        this.metricsInterval = setInterval(
            () => this.aggregateMetrics(),
            CONFIG.METRICS_AGGREGATION_INTERVAL
        );
    }

    public async disconnect(): Promise<void> {
        clearInterval(this.maintenanceInterval);
        clearInterval(this.personalityInterval);
        clearInterval(this.metricsInterval);
        
        await this.redis.quit();
        logger.info('RoastBot disconnected successfully');
    }
}

// index.ts
import { TwitterApi } from 'twitter-api-v2';
import { RoastBot } from './roast-bot';
import { logger } from './logger';
import * as process from 'process';

if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY environment variable is required');
}

const client = new TwitterApi({
    appKey: process.env.TWITTER_APP_KEY,
    appSecret: process.env.TWITTER_APP_SECRET,
    accessToken: process.env.TWITTER_ACCESS_TOKEN,
    accessSecret: process.env.TWITTER
