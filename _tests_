import { describe, test, expect, beforeEach, jest } from '@jest/globals';
import { Redis } from 'ioredis';
import { RoastBot } from '../src/RoastBot';
import OpenAI from 'openai';

// Mock OpenAI and Redis
jest.mock('openai');
jest.mock('ioredis');

describe('RoastBot', () => {
    let bot: RoastBot;
    let mockRedis: jest.Mocked<Redis>;
    let mockOpenAI: jest.Mocked<OpenAI>;

    beforeEach(() => {
        // Clear all mocks
        jest.clearAllMocks();

        // Setup Redis mock
        mockRedis = new Redis() as jest.Mocked<Redis>;
        mockRedis.get.mockResolvedValue(null);
        mockRedis.set.mockResolvedValue('OK');
        mockRedis.incr.mockResolvedValue(1);

        // Setup OpenAI mock
        mockOpenAI = new OpenAI({ apiKey: 'fake-key' }) as jest.Mocked<OpenAI>;
        mockOpenAI.chat.completions.create.mockResolvedValue({
            choices: [{ message: { content: 'Mocked response' } }]
        } as any);

        bot = new RoastBot('fake-api-key', mockRedis);
    });

    describe('Message Handling', () => {
        test('handles normal messages', async () => {
            const message = {
                content: 'Hello bot!',
                userId: '123',
                userName: 'TestUser'
            };

            const response = await bot.handleMessage(message);
            expect(response).toBeTruthy();
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalled();
        });

        test('handles empty messages', async () => {
            const message = {
                content: '',
                userId: '123',
                userName: 'TestUser'
            };

            const response = await bot.handleMessage(message);
            expect(response).toContain('empty message');
        });

        test('handles long messages', async () => {
            const message = {
                content: 'a'.repeat(2000),
                userId: '123',
                userName: 'TestUser'
            };

            const response = await bot.handleMessage(message);
            expect(response).toContain('too long');
        });
    });

    describe('OpenAI Integration', () => {
        test('handles OpenAI errors gracefully', async () => {
            mockOpenAI.chat.completions.create.mockRejectedValueOnce(
                new Error('OpenAI Error')
            );

            const message = {
                content: 'Test message',
                userId: '123',
                userName: 'TestUser'
            };

            const response = await bot.handleMessage(message);
            expect(response).toContain('error');
        });

        test('retries on rate limit', async () => {
            mockOpenAI.chat.completions.create
                .mockRejectedValueOnce({ status: 429 })
                .mockResolvedValueOnce({
                    choices: [{ message: { content: 'Retry success' } }]
                } as any);

            const message = {
                content: 'Test message',
                userId: '123',
                userName: 'TestUser'
            };

            const response = await bot.handleMessage(message);
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledTimes(2);
            expect(response).toContain('Retry success');
        });
    });

    describe('Redis Integration', () => {
        test('handles Redis connection errors', async () => {
            mockRedis.get.mockRejectedValueOnce(new Error('Redis Error'));

            const message = {
                content: 'Test message',
                userId: '123',
                userName: 'TestUser'
            };

            await expect(bot.handleMessage(message)).resolves.toBeTruthy();
        });

        test('persists conversation history', async () => {
            const message = {
                content: 'Test message',
                userId: '123',
                userName: 'TestUser'
            };

            await bot.handleMessage(message);
            expect(mockRedis.set).toHaveBeenCalled();
        });
    });

    describe('Rate Limiting', () => {
        test('enforces per-user rate limits', async () => {
            const message = {
                content: 'Test message',
                userId: '123',
                userName: 'TestUser'
            };

            mockRedis.incr.mockResolvedValueOnce(6); // Over limit

            const response = await bot.handleMessage(message);
            expect(response).toContain('wait');
        });

        test('resets rate limits after timeout', async () => {
            const message = {
                content: 'Test message',
                userId: '123',
                userName: 'TestUser'
            };

            mockRedis.incr
                .mockResolvedValueOnce(6) // First call over limit
                .mockResolvedValueOnce(1); // Reset after timeout

            const firstResponse = await bot.handleMessage(message);
            expect(firstResponse).toContain('wait');

            // Simulate timeout
            jest.advanceTimersByTime(60000);

            const secondResponse = await bot.handleMessage(message);
            expect(secondResponse).not.toContain('wait');
        });
    });
}); 
